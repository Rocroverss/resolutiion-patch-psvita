[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;
uniform float width : hint_range(0.0, 16.0);
uniform vec4 outline_color: hint_color;

void fragment(){
    vec4 col = texture(TEXTURE, UV);
    vec2 ps = TEXTURE_PIXEL_SIZE * width;
    float a;
    float maxa = col.a;
    float mina = col.a;


    for(float y = -1.0; y <= 1.0; y++) {
        for(float x = -1.0; x <= 1.0; x++) {
            if(vec2(x,y) == vec2(0.0)) {
                continue; // ignore the center of kernel
            }

            a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
            maxa = max(a, maxa); 
            mina = min(a, mina);
        }
    }

    // Fill transparent pixels only, don't overlap texture
    if(col.a == 0.0) {
        COLOR = mix(col, outline_color, maxa-mina);
    } else {
        // Note on old code: if the last mix value is always 0, why even use it?
        COLOR = col;
    }
}"

[resource]
render_priority = 30
shader = SubResource( 1 )
shader_param/width = 0.0
shader_param/outline_color = Color( 1, 0, 0, 1 )
